{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["// pixabay-api.js \n\nexport function fetchImages(query) {                         \n  return fetch(\n    `https://pixabay.com/api/?key=42977219-0f6c9f9217f976d8651793c3a&q=${query}&image_type=photo&per_page=15&orientation=horizontal&safesearch=true`\n    )\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  })\n  .then(data => {\n    if (data.hits.length === 0) {\n      throw new Error ('No images found');\n    }\n    return data.hits;\n  })\n  .catch(error => {\n    iziToast.error({\n      title: 'Error',\n      message: error.message || 'Failed to fetch images. Please try again later.',\n      position: 'topCenter',\n    });\n    throw error;\n  });\n}\n","// render-functions.js \n\nimport iziToast from 'izitoast';\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nexport function renderImg(images, photoGallery, lightbox) {    \n  const markupImg = images                          \n    .map(image => {\n      return `<div class=\"blockForAllElements\">\n          <li>\n          <a href=${image.largeImageURL} download=\"false\">\n          <img src=${image.webformatURL} alt = \"${image.tags}\" class = \"imgOfUser\">\n          </a>\n          </li>\n          <div class = \"divForDescription\"> \n          <ul class=\"blockOfInfo\"> \n            <li class=\"title\">Likes</li>\n            <li class=\"info\">${image.likes}</li>\n          </ul>\n          <ul class=\"block\">\n            <li class=\"title\">Views</li>\n            <li class=\"info\">${image.views}</li>\n          </ul>\n          <ul class=\"block\">\n            <li class=\"title\">Comments</li>\n            <li class=\"info\">${image.comments}</li>\n          </ul>\n          <ul class=\"block\">\n            <li class=\"title\">Downloads</li>\n            <li class=\"info\">${image.downloads}</li>\n          </ul>\n          </div>\n        </div>`;\n    })\n    .join('');\n  photoGallery.insertAdjacentHTML('beforeend', markupImg);\n\n  lightbox.refresh();\n}\n\nexport function toggleLoader(loaderContainer) {                              \n  const spanElement = document.createElement('span');\n  loaderContainer.appendChild(spanElement);\n  spanElement.classList.add('loader');\n}\n\nexport function spanElementRem() {                       \n  const toggleLoader = document.querySelector('.loader');\n  toggleLoader.remove();\n}\n","// main.js\n\nimport iziToast from 'izitoast';\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nimport { fetchImages } from './js/pixabay-api.js';\nimport { renderImg, toggleLoader, spanElementRem } from './js/render-functions.js';\n\nconst searchInput = document.querySelector('.searchInput');    \nconst searchButton = document.querySelector('.searchButton');\nconst searchForm = document.querySelector('.formForInput') \nconst photoGallery = document.querySelector('.photoGallery');\nconst loaderContainer = document.querySelector('.loaderContainer');\n\nconst lightbox = new SimpleLightbox('.gallery a', {   \n  captionDelay: 250,\n  captionsData: 'alt',\n});\n\nsearchForm.addEventListener('submit', event => {   \n  event.preventDefault();\n  photoGallery.innerHTML = '';\n  toggleLoader(loaderContainer);\n  const query = searchInput.value.trim();\n  if (!query) {\n    iziToast.show({\n      color: 'red',\n      message: `Sorry, the input field must be filled in to start the photo search.`,\n      position: 'topCenter',\n    });\n  } else {\n    fetchImages(query)\n      .then(images => {\n        if (images.length === 0) {\n          iziToast.show({\n            color: 'red',\n            message: `Sorry, there are no images matching your search query. Please try again!`,\n            position: 'topCenter',\n          });\n        } else {\n          renderImg(images, photoGallery, lightbox);\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      })\n      .finally(() => spanElementRem());\n  }\n});\n"],"names":["fetchImages","query","response","data","error","renderImg","images","photoGallery","lightbox","markupImg","image","toggleLoader","loaderContainer","spanElement","spanElementRem","searchInput","searchForm","SimpleLightbox","event","iziToast"],"mappings":"wvBAEO,SAASA,EAAYC,EAAO,CACjC,OAAO,MACL,qEAAqEA,CAAK,sEACzE,EACF,KAAKC,GAAY,CAChB,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,UAAU,EAErC,OAAOA,EAAS,MACpB,CAAG,EACA,KAAKC,GAAQ,CACZ,GAAIA,EAAK,KAAK,SAAW,EACvB,MAAM,IAAI,MAAO,iBAAiB,EAEpC,OAAOA,EAAK,IAChB,CAAG,EACA,MAAMC,GAAS,CACd,eAAS,MAAM,CACb,MAAO,QACP,QAASA,EAAM,SAAW,kDAC1B,SAAU,WAChB,CAAK,EACKA,CACV,CAAG,CACH,CCpBO,SAASC,EAAUC,EAAQC,EAAcC,EAAU,CACxD,MAAMC,EAAYH,EACf,IAAII,GACI;AAAA;AAAA,oBAEOA,EAAM,aAAa;AAAA,qBAClBA,EAAM,YAAY,WAAWA,EAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAM7BA,EAAM,KAAK;AAAA;AAAA;AAAA;AAAA,+BAIXA,EAAM,KAAK;AAAA;AAAA;AAAA;AAAA,+BAIXA,EAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,+BAIdA,EAAM,SAAS;AAAA;AAAA;AAAA,eAIzC,EACA,KAAK,EAAE,EACVH,EAAa,mBAAmB,YAAaE,CAAS,EAEtDD,EAAS,QAAO,CAClB,CAEO,SAASG,EAAaC,EAAiB,CAC5C,MAAMC,EAAc,SAAS,cAAc,MAAM,EACjDD,EAAgB,YAAYC,CAAW,EACvCA,EAAY,UAAU,IAAI,QAAQ,CACpC,CAEO,SAASC,GAAiB,CACV,SAAS,cAAc,SAAS,EACxC,OAAM,CACrB,CCtCA,MAAMC,EAAc,SAAS,cAAc,cAAc,EACpC,SAAS,cAAc,eAAe,EAC3D,MAAMC,EAAa,SAAS,cAAc,eAAe,EACnDT,EAAe,SAAS,cAAc,eAAe,EACrDK,EAAkB,SAAS,cAAc,kBAAkB,EAE3DJ,EAAW,IAAIS,EAAe,aAAc,CAChD,aAAc,IACd,aAAc,KAChB,CAAC,EAEDD,EAAW,iBAAiB,SAAUE,GAAS,CAC7CA,EAAM,eAAc,EACpBX,EAAa,UAAY,GACzBI,EAAaC,CAAe,EAC5B,MAAMX,EAAQc,EAAY,MAAM,KAAI,EAC/Bd,EAOHD,EAAYC,CAAK,EACd,KAAKK,GAAU,CACVA,EAAO,SAAW,EACpBa,EAAS,KAAK,CACZ,MAAO,MACP,QAAS,2EACT,SAAU,WACtB,CAAW,EAEDd,EAAUC,EAAQC,EAAcC,CAAQ,CAElD,CAAO,EACA,MAAMJ,GAAS,CACd,QAAQ,MAAMA,CAAK,CAC3B,CAAO,EACA,QAAQ,IAAMU,EAAc,CAAE,EArBjCK,EAAS,KAAK,CACZ,MAAO,MACP,QAAS,sEACT,SAAU,WAChB,CAAK,CAmBL,CAAC"}